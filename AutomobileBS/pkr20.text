//package main
//  import (
// 	"fmt"

// 	// April 2020, Updated to Fabric 2.0 Shim
// 	"github.com/hyperledger/fabric-chaincode-go/shim"

// 	peer "github.com/hyperledger/fabric-protos-go/peer"
// 	//peer as a alias of the package

// 	// Conversion functions
// 	"strconv"

// 	// JSON Encoding
// 	"encoding/json"
// )

// // PkrTokenChaincode Represents our chaincode object
// type PkrTokenChaincode struct {
// }

// // PkrToken structure manages the state 
// type PkrToken struct {
// 	Symbol   		string   `json:"symbol"`
// 	TotalSupply     uint64   `json:"totalSupply"`
// 	Description		string   `json:"description"`
// 	Creator			string   `json:"creator"`
// }
// type Wallet struct{
// 	CNIC string `json:"cnic"`
// 	Name string `json:"name"`
// 	Balance string `json:"balance"`
// }
// // OwnerPrefix is used for creating the key for balances
// const   OwnerPrefix="CNIC."

// // Init Implements the Init method
// // Receives 4 parameters =  [0] Symbol [1] TotalSupply   [2] Description  [3] Owner
// func (token *PkrTokenChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response {

// 	// Simply print a message
// 	fmt.Println("Init executed")
// 	_, args := stub.GetFunctionAndParameters()

// 	// Check if we received the right number of arguments
// 	if len(args) < 4 {
// 		return shim.Error("Failed - incorrect number of parameters!! ")
// 	}
// 	symbol := string(args[0])
// 	// Get total supply & check if it is > 0
// 	//second argument specify the base of conversion
// 	//3rd argument specify the size in bits

// 	totalSupply, err := strconv.ParseUint(string(args[1]),10,64)

// 	if err != nil || totalSupply == 0 {
// 		return shim.Error("Total Supply MUST be a number > 0 or there is error!! ")
// 	}

// 	// Creator name cannot be zero length
// 	if len(args[3]) == 0 {
// 		return errorResponse("Creator identity cannot be 0 length!!!", 3) //passing three to print also error code helps in debugging
// 	}
// 	creator := string(args[3])

// 	// Create an instance of the token struct
// 	var Pkr = PkrToken{Symbol: symbol, TotalSupply: totalSupply, Description: string(args[2]), Creator: creator}

// 	// Convert to JSON and store token in the state
// 	jsonPkr, _ := json.Marshal(Pkr) 
// 	//jsonPkr is first converted to json and then to byte array
// 	stub.PutState("Pkrtoken", []byte(jsonPkr))

// 	// Maintain the balances in the state db
// 	// In the begining all tokens are owned by the creator of the token
// 	key := OwnerPrefix+"3520299610969"
// 	fmt.Println("Key=",key)
// 	//key setting=CNIC.35202-99610969
// 	var wallet = Wallet{CNIC:"3520299610969",Name:"M.Adil",Balance:string(args[1])}
// 	jsonwallet,_:= json.Marshal(wallet)
// 	err=stub.PutState(key,[]byte(jsonwallet))
// 	if err != nil {
// 		return errorResponse(err.Error(), 4)
// 	}

// 	return shim.Success([]byte(jsonPkr))
// }

// // Invoke method
// func (token *PkrTokenChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response {

// 	// Get the function name and parameters
// 	function, args := stub.GetFunctionAndParameters()

// 	fmt.Println("Invoke executed : ", function, " args=", args)

// 	switch {

// 	case	function == "totalSupply":
// 			return totalSupply(stub)
// 	case	function == "balanceOf":
// 			return balanceOf(stub, args)
// 	case	function == "transfer":
// 			return transfer(stub, args)
// 	}

// 	return errorResponse("Invalid function",1)
// }

// /**
//  * Getter function 
//  * function totalSupply() public view returns (uint);
//  * Returns the totalSupply for the Pkrtoken
//  **/
// func totalSupply(stub shim.ChaincodeStubInterface) peer.Response {

// 	bytes, err := stub.GetState("Pkrtoken")
// 	if err != nil {
// 		return errorResponse(err.Error(), 5)
// 	}

// 	// Read the JSON and Initialize the struct
// 	var Pkr  PkrToken
// 	_ = json.Unmarshal(bytes, &Pkr)

	
// 	// Create the JSON Response with totalSupply
// 	return successResponse(strconv.FormatUint(Pkr.TotalSupply,10))
// }

// /**
//  * Getter function
//  * function balanceOf(address tokenOwner) public view returns (uint balance);
//  * Returns the balance for the specified owner
//  * {"Args":["balanceOf","cnic"]}
//  **/
//  func balanceOf(stub shim.ChaincodeStubInterface, args []string) peer.Response {
// 	// Check if owner id is in the arguments
// 	if len(args) < 1   {
// 		return errorResponse("Needs OwnerID!!!", 6)
// 	}
// 	OwnerID := args[0]
// 	//contains cnic
// 	bytes, err := stub.GetState(OwnerPrefix+OwnerID)
// 	if err != nil {
// 		return errorResponse(err.Error(), 7)
// 	}
// 	//convert the balance in json and return it
// 	var wallet Wallet
// 	_=json.Unmarshal(bytes,&wallet)
// 	response := balanceJSON(OwnerID, wallet)

// 	return successResponse(response)
//  }

//  /**
//   * Setter function
//   * function transfer(address to, uint tokens) public returns (bool success);
//   * Transfer tokens 
//   * {"Args":["from","to","amount"]}
//   **/
//   func transfer(stub shim.ChaincodeStubInterface, args []string) peer.Response {
// 	// Check if owner id is in the arguments
// 	if len(args) < 4   {
// 		return errorResponse("Needs to, from & amount!!!", 700)
// 	}

// 	from := string(args[0])
// 	to := string(args[1])
// 	amount, err := strconv.Atoi(string(args[2]))
// 	if err != nil {
// 		return errorResponse(err.Error(), 701)
// 	}
// 	if(amount <= 0){
// 		return errorResponse("Amount MUST be > 0!!!", 702)
// 	}

// 	// Get the Balance for from
// 	bytes, _ := stub.GetState(OwnerPrefix+from)
	

// 	if len(bytes) == 0 {
// 		// That means 0 token balance
// 		return errorResponse("Balance MUST be > 0!!!", 703)
// 	}
// 	var wallet Wallet
// 	_ =json.Unmarshal(bytes,&wallet)
// 	fromBalance, _ := strconv.Atoi(wallet.Balance)

// 	if fromBalance < amount {
// 		return errorResponse("Insufficient balance to cover transfer!!!", 704)
// 	}
// 	// Reduce the tokens in from account
// 	fromBalance = fromBalance - amount
	
// 	// Get the balance in to account
// 	bytes, _ = stub.GetState(OwnerPrefix+to)
// 	toBalance := 0
// 	var wallet1 Wallet
// 	//if wallet exist than get his balance
// 	if len(bytes) > 0 {
		
// 		_=json.Unmarshal(bytes,&wallet1)

// 		toBalance, _ = strconv.Atoi(wallet1.Balance)
// 	}
// 	toBalance += amount

// 	// Update the balance
// 	// bytes = []byte(strconv.FormatInt(int64(fromBalance), 10))
// 	wallet.Balance=strconv.FormatInt(int64(fromBalance), 10)
// 	bytes1,_:=json.Marshal(wallet)
// 	err = stub.PutState(OwnerPrefix+from, []byte(bytes1))

// 	// bytes = []byte(strconv.FormatInt(int64(toBalance), 10))
// 	wallet1.Balance=strconv.FormatInt(int64(toBalance), 10)
// 	wallet1.Name=args[3] //setting name of to owner
// 	bytes2,_:=json.Marshal(wallet1)

// 	err = stub.PutState(OwnerPrefix+to, []byte(bytes2))

// 	// Emit Transfer Event
// 	display := "{\"from\":\""+from+"\", \"to\":\""+to+"\",\"amount\":"+strconv.FormatInt(int64(amount),10)+"}"
// 	// stub.SetEvent("transfer", []byte(eventPayload))
// 	return successResponse(display)
//   }

//  // balanceJSON creates a JSON for representing the balance
//  func balanceJSON(OwnerID string, wallet Wallet) (string) {
// 	 return "{\"owner-cnic\":\""+OwnerID+"\", \"balance\":"+wallet.Balance+"\", \"name\":"+wallet.Name+ "}"
//  }


// func errorResponse(err string, code  uint ) peer.Response {
// 	codeStr := strconv.FormatUint(uint64(code), 10)
// 	// errorString := "{\"error\": \"" + err +"\", \"code\":"+codeStr+" \" }"
// 	errorString := "{\"error\":" + err +", \"code\":"+codeStr+" \" }"
// 	return shim.Error(errorString)
// }

// func successResponse(dat string) peer.Response {
// 	success := "{\"response\": " + dat +", \"code\": 0 }"
// 	return shim.Success([]byte(success))
// }

// // Chaincode registers with the Shim on startup
// func main() {
// 	fmt.Println("Started....")
// 	err := shim.Start(new(PkrTokenChaincode))
// 	if err != nil {
// 		fmt.Printf("Error starting chaincode: %s", err)
// 	}
// }
